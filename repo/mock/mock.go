// Code generated by MockGen. DO NOT EDIT.
// Source: cahe.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/surajkadam/youtube_assignment/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddVideos mocks base method.
func (m *MockRepository) AddVideos(ctx context.Context, videos []model.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVideos", ctx, videos)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVideos indicates an expected call of AddVideos.
func (mr *MockRepositoryMockRecorder) AddVideos(ctx, videos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVideos", reflect.TypeOf((*MockRepository)(nil).AddVideos), ctx, videos)
}

// DayTopViewed mocks base method.
func (m *MockRepository) DayTopViewed(ctx context.Context, limit int64) ([]model.ViedeoDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DayTopViewed", ctx, limit)
	ret0, _ := ret[0].([]model.ViedeoDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DayTopViewed indicates an expected call of DayTopViewed.
func (mr *MockRepositoryMockRecorder) DayTopViewed(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DayTopViewed", reflect.TypeOf((*MockRepository)(nil).DayTopViewed), ctx, limit)
}

// DayViewCount mocks base method.
func (m *MockRepository) DayViewCount(ctx context.Context, video string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DayViewCount", ctx, video)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DayViewCount indicates an expected call of DayViewCount.
func (mr *MockRepositoryMockRecorder) DayViewCount(ctx, video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DayViewCount", reflect.TypeOf((*MockRepository)(nil).DayViewCount), ctx, video)
}

// LifetimeTopViewed mocks base method.
func (m *MockRepository) LifetimeTopViewed(ctx context.Context, limit int64) ([]model.ViedeoDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifetimeTopViewed", ctx, limit)
	ret0, _ := ret[0].([]model.ViedeoDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifetimeTopViewed indicates an expected call of LifetimeTopViewed.
func (mr *MockRepositoryMockRecorder) LifetimeTopViewed(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifetimeTopViewed", reflect.TypeOf((*MockRepository)(nil).LifetimeTopViewed), ctx, limit)
}

// LifetimeViewCount mocks base method.
func (m *MockRepository) LifetimeViewCount(ctx context.Context, video string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifetimeViewCount", ctx, video)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifetimeViewCount indicates an expected call of LifetimeViewCount.
func (mr *MockRepositoryMockRecorder) LifetimeViewCount(ctx, video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifetimeViewCount", reflect.TypeOf((*MockRepository)(nil).LifetimeViewCount), ctx, video)
}

// Viewed mocks base method.
func (m *MockRepository) Viewed(ctx context.Context, video string, incr int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Viewed", ctx, video, incr)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Viewed indicates an expected call of Viewed.
func (mr *MockRepositoryMockRecorder) Viewed(ctx, video, incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Viewed", reflect.TypeOf((*MockRepository)(nil).Viewed), ctx, video, incr)
}
